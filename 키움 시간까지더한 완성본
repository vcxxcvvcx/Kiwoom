import requests
import pymysql
import csv
import time
from datetime import datetime
from kiwoom_key import appkey, secretkey

# MySQL 설정
MYSQL_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '5737',
    'database': 'stock_data',
    'charset': 'utf8mb4'
}

# 안전한 숫자 변환
def safe_int(value):
    try:
        return int(str(value).replace(',', '').strip())
    except:
        return 0

# 접근토큰 발급
def get_token():
    url = 'https://api.kiwoom.com/oauth2/token'
    payload = {
        'grant_type': 'client_credentials',
        'appkey': appkey,
        'secretkey': secretkey
    }
    headers = {'Content-Type': 'application/json;charset=UTF-8'}
    res = requests.post(url, json=payload, headers=headers)
    return res.json().get("token")

# 단일 종목 조회
def fetch_stock_info(token, shcode):
    url = "https://api.kiwoom.com/api/dostk/mrkcond"
    headers = {
        "Content-Type": "application/json",
        "authorization": f"Bearer {token}",
        "api-id": "ka10007"
    }
    payload = { "stk_cd": shcode }
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# 저장
def save_snapshot(data):
    with pymysql.connect(**MYSQL_CONFIG) as conn:
        with conn.cursor() as cur:
            sql = """
            INSERT INTO stock_snapshot (
                shcode, hname, price, change_pct, amount,
                listed_shares, total_offer_qty, total_bid_qty, created_at
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            cur.execute(sql, (
                data.get("stk_cd"),
                data.get("stk_nm"),
                safe_int(data.get("cur_prc")),
                float(data.get("flu_rt") or 0),
                safe_int(data.get("trde_qty")),
                safe_int(data.get("flo_stkcnt")),
                safe_int(data.get("tot_sel_req")),
                safe_int(data.get("tot_buy_req")),
                datetime.now()
            ))
        conn.commit()

# CSV 목록
CSV_FILES = [
    "코스피_전종목.csv",
    "코스닥_전종목.csv",
    "코넥스_전종목.csv",
    "넥스트_전종목.csv"
]

# CSV에서 종목코드 리스트 추출
def load_stock_list():
    stock_list = []
    for file in CSV_FILES:
        with open(file, newline='', encoding='utf-8-sig') as f:
            reader = csv.DictReader(f)
            for row in reader:
                stock_list.append({
                    "code": row["종목코드"],
                    "name": row["종목명"]
                })
    return stock_list

# ▶ 실행 시작
if __name__ == '__main__':
    실행시간 = {"15:42", "16:46", "20:01"}
    실행완료 = False

    while True:
        now = datetime.now().strftime("%H:%M")

        if now in 실행시간 and not 실행완료:
            print(f"\n🚀 {now} 실행 시작")
            token = get_token()
            stock_list = load_stock_list()

            fail_list = []
            success_count = 0

            for stock in stock_list:
                info = fetch_stock_info(token, stock["code"])
                if info:
                    try:
                        save_snapshot(info)
                        print(f"✅ 저장: {stock['name']}")
                        success_count += 1
                    except Exception as e:
                        print(f"❌ 저장 오류: {stock['code']} - {e}")
                        fail_list.append(stock)
                else:
                    print(f"❌ 조회 실패: {stock['code']}")
                    fail_list.append(stock)

                time.sleep(0.2)

            print(f"\n✅ 총 저장 완료: {success_count}개")
            if fail_list:
                print(f"⚠️ 실패한 종목 수: {len(fail_list)}")
                with open("fail_list.txt", "w", encoding="utf-8") as f:
                    for stock in fail_list:
                        f.write(f"{stock['code']},{stock['name']}\n")
                print("📁 실패 리스트 저장 완료: fail_list.txt")

            실행완료 = True  # 반복 방지
        else:
            print(f"⌛ 실행 대기중... 현재시간: {now}", end="\r")
            time.sleep(10)
